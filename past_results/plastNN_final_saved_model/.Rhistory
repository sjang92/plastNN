cancer_type = "liver_hepatocellular_carcinoma"
setwd("/Volumes/groups/arend/SIMLR/analysis/output/")
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer", "ggpubr"), require, character.only = TRUE)
load_data_external()
num_clusters=8
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
names = c(2,7,1,6,5,4,3,8)
data = rename_clusters(data, names=names)
rename_data_extra(names)
palette = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC")
colcols = rep(palette, unique(data[, .(clust.ID, clust.size)])[order(clust.ID), clust.size])
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
x
ggplot(x[pathway=="TP53"], aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)+stat_compare_means()
ggplot(x[pathway=="TP53"], aes(x=factor(clust.ID), y=value))+geom_boxplot()
x[pathway=="TP53"]
ggplot(x[pathway=="p53"], aes(x=factor(clust.ID), y=value))+geom_boxplot()
ggplot(x[pathway=="p53"], aes(x=factor(clust.ID), y=value))+geom_boxplot()+ scale_color_manual(palette)  +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank())
palette
ggplot(x[pathway=="p53"], aes(x=factor(clust.ID), y=value))+geom_boxplot()+ scale_color_manual(palette)  +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank())+
scale_y_continuous(breaks=c(-2, -1, 0), limits = c(-2.5, 0.5))
ggplot(x[pathway=="p53"], aes(x=factor(clust.ID), y=value, fill= factor(clust.ID)))+
geom_boxplot()+ scale_color_manual(palette) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank())+
scale_y_continuous(breaks=c(-2, -1, 0), limits = c(-2.5, 0.5))
x
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==7 & pathway=="PI3K", value])
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==7 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==6 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==5 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==4 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==3 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==2 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="PI3K", value], x[clust.ID==1 & pathway=="PI3K", value], alternative = "greater")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==1 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==2 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==3 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==4 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==5 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==6 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==8 & pathway=="p53", value], x[clust.ID==7 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==7 & pathway=="p53", value], x[clust.ID==6 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==7 & pathway=="p53", value], x[clust.ID==5 & pathway=="p53", value], alternative = "less")
wilcox.test(x[clust.ID==7 & pathway=="p53", value], x[clust.ID==2 & pathway=="p53", value], alternative = "less")
cancer_type = "lung_adenocarcinoma"
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer", "ggpubr"), require, character.only = TRUE)
load_data_external()
num_clusters=8
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
clin2 = fread("../../../external_data/tcga_lung_supp/S_Table 7-Clinical&Molec_Summar-Table 1.csv", skip=4, header=T)
names = c(8,3,5,4,6,2,7,1)
data = rename_clusters(data, names=names)
rename_data_extra(names)
colpal = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC")
colcols = rep(colpal, unique(data[, .(clust.ID, clust.size)])[order(clust.ID), clust.size])
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)+stat_compare_means()
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)+stat_compare_means()
dev.off()
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)+stat_compare_means()
plot_sig_heatmap(siggenes)
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)+stat_compare_means()
cancer_type = "head_neck_squamous_cell_carcinomas"
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer"), require, character.only = TRUE)
load_data_external()
num_clusters=8
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
names = c(2,3,1,6,4,5,7,8)
data = rename_clusters(data, names=names)
rename_data_extra(names)
p=ggplot(unique(data[,clust.ID, clust.size]), aes(x=factor(clust.ID), y=clust.size, fill=factor(clust.ID))) + geom_bar(stat="identity")
colpal=ggplot_build(p)[[1]][[1]][,1]
colcols = rep(colpal, unique(data[, .(clust.ID, clust.size)])[order(clust.ID), clust.size])
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)
cancer_type = "sarcoma"
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer"), require, character.only = TRUE)
load_data_external()
num_clusters=5
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
clin2 = as.data.table(read_xlsx("../../../external_data/tcga_supp_sarc.xlsx", skip=1, sheet = 2))
clin2[, PATIENT_ID:=substr(`TCGA barcode`,1,12)]
clin = merge(clin, clin2, by="PATIENT_ID", all.x=T)
names = c(2,1,4,3,5)
data = rename_clusters(data, names=names)
rename_data_extra(names)
p=ggplot(unique(data[,clust.ID, clust.size]), aes(x=factor(clust.ID), y=clust.size, fill=factor(clust.ID))) + geom_bar(stat="identity")
colpal=ggplot_build(p)[[1]][[1]][,1]
colcols = rep(colpal, unique(data[, .(clust.ID, clust.size)])[order(clust.ID), clust.size])
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)
cancer_type = "clear_cell_renal_cell_carcinoma"
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer"), require, character.only = TRUE)
load_data_external()
num_clusters = 4
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
names = c(1, 4, 3, 2)
data = rename_clusters(data, names=names)
names10 = c("3a", "2a", "1a", "3b", "1b", "4", "2b", "2c", "2d", "3c/2")
data=rename_clusters(data, col="clust.ID.10", names=names10)
rename_data_extra(names)
p=ggplot(unique(data[,clust.ID, clust.size]), aes(x=factor(clust.ID), y=clust.size, fill=factor(clust.ID))) + geom_bar(stat="identity")
colpal=ggplot_build(p)[[1]][[1]][,1]
colcols = rep(colpal, unique(data[, .(clust.ID, clust.size)])[order(clust.ID), clust.size])
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)
cancer_type = "thymoma"
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer"), require, character.only = TRUE)
load_data_external()
num_clusters=7
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
names=c(3,1,6,5,7,4,2)
data = rename_clusters(data, names=names)
rename_data_extra(names)
survplot(surv)+scale_x_continuous(breaks=c(0, 4, 8, 12))
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+
facet_wrap(~pathway, scales="free")
#Analysis of breast
cancer_type = "breast_tumours"
#Set working directory
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer"), require, character.only = TRUE)
load_data_external()
#13 clusters
num_clusters=13
#Load data
load("data.RData")
col = paste0("clust.ID.", num_clusters)
data[, clust.size:=length(unique(patient)), by = get(col)]
setnames(data, eval(col), "clust.ID")
load_data_extra(cancer_type, num_clusters)
#Rename clusters
names = c(8,12,1,5,9,2,11,4,7,10,6,13,3)
data = rename_clusters(data, names=names)
rename_data_extra(names = names)
#Progeny
x=scores[patient %in% unique(data$patient)]
x[, ord:=rev(rank(sample)), by=patient]
x = x[ord==1]
x = merge(x, unique(data[, .(patient, clust.ID)]), by="patient")
x = melt(x, id.vars = c(1,2,14,15), variable.name = "pathway")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)
#Analysis of breast
cancer_type = "breast_tumours"
#Set working directory
setwd(paste0("/Volumes/groups/arend/SIMLR/analysis/output/", cancer_type))
source("../../stories/stories_functions.R")
lapply(c("data.table", "ggplot2", "gplots", "RColorBrewer", "readxl", "survival", "rms", "survminer"), require, character.only = TRUE)
load_data_external()
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway)
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway, scales="free")
ggplot(x, aes(x=factor(clust.ID), y=value))+geom_boxplot()+facet_wrap(~pathway, scales="free")+stat_compare_means()
R
sessionInfo()
library("SummarizedExperiment", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mean(97,94,94,95,99,99)
mean(97,94,93,95,99,99)
setwd("~/Documents/GitHub/apicoplast_predictor/saved_models/model_64_64_16_0.05/")
library(data.table)
rm(list=ls())
setwd("~/Documents/GitHub/apicoplast_predictor/saved_models/model_64_64_16_0.05/")
library(data.table)
test = fread("test_output.csv")
setwd("~/Documents/GitHub/apicoplast_predictor/saved_models/model_64_64_16_0.05/aa_rna/")
library(data.table)
test = fread("test_output.csv")
pos = fread("pos_output.csv")
neg = fread("neg_output.csv")
head(pos)
pred
test
train = rbind(pos, neg)
test = fread("test_output.csv")[, 1:10]
pos = fread("pos_output.csv")[, 1:10]
neg = fread("neg_output.csv")[, 1:10]
test
test
test = fread("test_output.csv", skip = 1, header=F)[, 1:10]
pos = fread("pos_output.csv", skip = 1, header=F)[, 1:10]
neg = fread("neg_output.csv", skip = 1, header=F)[, 1:10]
test
pos
neg
setnames(test, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
setnames(pos, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
setnames(neg, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
pos[, label:=1]
neg[, label:=0]
train = rbind(pos, neg)
test
train
pos[, label:="Apicoplast"]
neg[, label:="Non-apicoplast"]
pos
test = fread("test_output.csv", skip = 1, header=F)[, 1:10]
pos = fread("pos_output.csv", skip = 1, header=F)[, 1:10]
neg = fread("neg_output.csv", skip = 1, header=F)[, 1:10]
setnames(test, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
setnames(pos, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
setnames(neg, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
pos[, label:="Apicoplast"]
neg[, label:="Non-apicoplast"]
train = rbind(pos, neg)
test[, prediction:=ifelse(pos_votes>3, "Apicoplast", "Non-apicoplast"), by = 1:nrow(test)]
train[, prediction:=ifelse(pos_votes>3, "Apicoplast", "Non-apicoplast"), by = 1:nrow(train)]
test
train
train[, .N, by=.(label, prediction)]
16/nrow(train)
head(test)
test = fread("test_output.csv", skip = 1, header=F)[, 1:10]
head(test)
test = fread("test_output.csv", skip = 1, header=F, sep2 = ";")[, 1:10]
test
test = fread("test_output.csv", skip = 1, header=F, sep=";")[, 1:10]
test
pos
test = fread("test_output.csv", skip = 1, header=F, sep=";")[, 1:10]
pos = fread("pos_output.csv", skip = 1, header=F)[, 1:10]
neg = fread("neg_output.csv", skip = 1, header=F)[, 1:10]
setnames(test, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
setnames(pos, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
setnames(neg, c("ID", "verdict", "pos_votes", "neg_votes", "pos_p_1", "pos_p_2", "pos_p_3", "pos_p_4", "pos_p_5", "pos_p_6"))
pos[, label:="Apicoplast"]
neg[, label:="Non-apicoplast"]
train = rbind(pos, neg)
test[, prediction:=ifelse(pos_votes>3, "Apicoplast", "Non-apicoplast"), by = 1:nrow(test)]
train[, prediction:=ifelse(pos_votes>3, "Apicoplast", "Non-apicoplast"), by = 1:nrow(train)]
test
test
dev.off()
test[, pos_p_1 := gsub("\\[|\\]", "", pos_p_1)]
test[, pos_p_6 := gsub("\\[|\\]", "", pos_p_6)]
test
test = test[, .(ID, prediction, pos_p1, pos_p2, pos_p3, pos_p4, pos_p5, pos_p6)]
test = test[, .(ID, prediction, pos_p_1, pos_p_2, pos_p_3, pos_p_4, pos_p_5, pos_p_6)]
train
train[, pos_p_1 := gsub("\\[|\\]", "", pos_p_1)]
train[, pos_p_6 := gsub("\\[|\\]", "", pos_p_6)]
train
train = train[, .(ID, label, prediction, pos_p_1, pos_p_2, pos_p_3, pos_p_4, pos_p_5, pos_p_6)]
train
write.csv(test, file = "supplementary_table_test_set_predictions.csv", quote=F, row.names = F)
write.csv(train, file = "supplementary_table_training_set_predictions.csv", quote=F, row.names = F)
